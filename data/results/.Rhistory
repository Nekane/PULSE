sum(catchMean(sp1)[,,2]*2081)
load("~/Dropbox/BoB/MSE/Git/Nekane_MSE/complex model/1quota12seasons.RData")
quota1
quota1* SIMNUMBER
load("~/Dropbox/BoB/MSE/Git/Nekane_MSE/complex model/1quota12seasons.RData")
ylim=c(0,8000)
xlimYPR <- c(0,0.08)
par(par(no.readonly=TRUE))
par(oma=c(3,3,0,0),mar=c(3,3,2,2),mfrow=c(2,2))
plot(rowMeans(hr1[,pyrnoMP,]), type="b", ylim= xlimYPR,  xlab="Age", ylab = "Selectivity", panel.first=grid(col = "ivory3"), xaxt="n",las=1)
#rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col ="#CCCCCC")
#par(new=TRUE)
text(1,0.078, "Unconstrained", pos=4)
#lines(rowMeans(hr1[,pyrnoMP,]), type="b", ylim= xlimYPR)
lines(rowMeans(hr1[,pyrMP,]), type="b", ylim= xlimYPR, col="#808080")
text(1,max(rowMeans(hr1[,pyrMP,]))+0.01, "Constrained", pos=4)
axis(1, at = seq(1, 6, by = 1))
mtext("(a)", side=3, line = -1.3, adj = 0.96, font=2, cex = 1)
lot(rowMeans(hr2[,pyrnoMP,]), type="b", ylim= xlimYPR,  xlab="Age", ylab = "Selectivity", panel.first=grid(col = "ivory3"), xaxt="n",las=1)
#rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col ="darkseagreen3")
#par(new=TRUE)
text(1,0.078, "Unconstrained", pos=4)
#lines(rowMeans(hr2[,pyrnoMP,]), type="b", ylim= xlimYPR)
lines(rowMeans(hr2[,pyrMP,]), type="b", ylim=  xlimYPR, col="#808080")
text(1,max(rowMeans(hr2[,pyrMP,]))-0.02, "Constrained", pos=4)
axis(1, at = seq(1, 6, by = 1))
mtext("(b)",  side=3, line = -1.3, adj = 0.96, font=2, cex = 1)
ylim=c(0,8000)
xlimYPR <- c(0,0.08)
par(par(no.readonly=TRUE))
par(oma=c(3,3,0,0),mar=c(3,3,2,2),mfrow=c(2,2))
plot(rowMeans(hr1[,pyrnoMP,]), type="b", ylim= xlimYPR,  xlab="Age", ylab = "Selectivity", panel.first=grid(col = "ivory3"), xaxt="n",las=1)
#rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col ="#CCCCCC")
#par(new=TRUE)
text(1,0.078, "Unconstrained", pos=4)
#lines(rowMeans(hr1[,pyrnoMP,]), type="b", ylim= xlimYPR)
lines(rowMeans(hr1[,pyrMP,]), type="b", ylim= xlimYPR, col="#808080")
text(1,max(rowMeans(hr1[,pyrMP,]))+0.01, "Constrained", pos=4)
axis(1, at = seq(1, 6, by = 1))
mtext("(a)", side=3, line = -1.3, adj = 0.96, font=2, cex = 1)
plot(rowMeans(hr2[,pyrnoMP,]), type="b", ylim= xlimYPR,  xlab="Age", ylab = "Selectivity", panel.first=grid(col = "ivory3"), xaxt="n",las=1)
#rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col ="darkseagreen3")
#par(new=TRUE)
text(1,0.078, "Unconstrained", pos=4)
#lines(rowMeans(hr2[,pyrnoMP,]), type="b", ylim= xlimYPR)
lines(rowMeans(hr2[,pyrMP,]), type="b", ylim=  xlimYPR, col="#808080")
text(1,max(rowMeans(hr2[,pyrMP,]))-0.02, "Constrained", pos=4)
axis(1, at = seq(1, 6, by = 1))
mtext("(b)",  side=3, line = -1.3, adj = 0.96, font=2, cex = 1)
plot(rowMeans(hr1[,pyrnoMP,]), type="b", ylim= xlimYPR,  xlab="Age", ylab = "Selectivity", panel.first=grid(col = "ivory3"), xaxt="n",las=1)
text(1,0.078, "Unconstrained", pos=4)
lines(rowMeans(hr1[,38,]), type="b", ylim= xlimYPR, col="#808080")
text(1,max(rowMeans(hr1[,38+0.01, "Constrained", pos=4)
axis(1, at = seq(1, 6, by = 1))
mtext("(c)", side=3, line = -1.3, adj = 0.96, font=2, cex = 1)
plot(rowMeans(hr2[,pyrnoMP,]), type="b", ylim= xlimYPR,  xlab="Age", ylab = "Selectivity", panel.first=grid(col = "ivory3"), xaxt="n",las=1)
text(1,0.078, "Unconstrained", pos=4)
lines(rowMeans(hr2[,38,]), type="b", ylim=  xlimYPR, col="#808080")
text(1,max(rowMeans(hr2[,38,]))+0.01, "Constrained", pos=4)
axis(1, at = seq(1, 6, by = 1))
mtext("(d)",  side=3, line = -1.3, adj = 0.96, font=2, cex = 1)
plot(rowMeans(hr2[,pyrnoMP,]), type="b", ylim= xlimYPR,  xlab="Age", ylab = "Selectivity", panel.first=grid(col = "ivory3"), xaxt="n",las=1)
text(1,0.078, "Unconstrained", pos=4)
lines(rowMeans(hr2[,48,]), type="b", ylim=  xlimYPR, col="#808080")
text(1,max(rowMeans(hr2[,48,]))+0.01, "Constrained", pos=4)
axis(1, at = seq(1, 6, by = 1))
mtext("(d)",  side=3, line = -1.3, adj = 0.96, font=2, cex = 1)
hr2
rowMeans(hr2[,38,])
rowMeans(hr1[,38,])
rowMeans(hr2[,18,])
rowMeans(hr2[,18,])/rowMeans(hr2[,38,])
rowMeans(hr2[,38,])/rowMeans(hr2[,18,])
load("/home/nekane/Desktop/MSEresults/1quota12seasons_65000.RData")
load("~/Dropbox/PULSE/Pulseproject/data/gamsol_final.rdata")
predcod <- expand.grid(sizeclass=1:5,area=as.factor(c(1:16)),week=1:52)
predcod
predcod <- cbind(predcod, gear="BT", lhp=log(2000), year=1974, yrwk=1, fishhour = 65)
predcod$yearwk <- (predcod$year - 1970)*52 + predcod$week             # vormt extra kolom!
predcod$data<-rep(NA,nrow(predcod))
pred_with_se   <- predict(gamcod,newdata=predcod,se=T) #get predicted value
load("~/Dropbox/PULSE/Pulseproject/data/gamsol_final.rdata")
predsol <- expand.grid(sizeclass=1:5,area=as.factor(c(1:16)),week=1:52)
predsol <- cbind(predsol, gear="BT", lhp=log(2000), year=1974, yrwk=1, fishhour= 65)
predsol$yearwk <- (predsol$year - 1970)*52 + predsol$week
predsol$data   <-rep(NA,nrow(predsol))
pred_with_se   <- predict(gamsol,newdata=predsol,se=T)
View(predsol)
library("mgcv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
pred_with_se   <- predict(gamsol,newdata=predsol,se=T)
pnorm(150,0.8)
pnorm(30,150,0.8)
pnorm(25,150,0.008)
qnbinom(0.90, 150,0.008)/24
qnbinom(0.90, 150,0.008)
qnbinom(0.90, 150,0.008)/24
pnorm(27.4, mean=50, sd=20)
pnorm(10.4, mean=50, sd=20)
pnorm(1, mean=50, sd=20)
pnorm(50, mean=50, sd=20)
pnorm(100, mean=50, sd=20)
qnbinom(0.90, 10, 1/3)
qnbinom(0.90, 10, 1/2)
pnorm(100, mean=50, sd=20)
qnbinom(0.90, 50, 20)/99
qnbinom(0.90, 50, 20)
pnorm(27.4, mean=50, sd=20)
qnbinom(0.90, 50, 20)/26
qnbinom(0.10, 50, 20)/26
qnbinom(0.10, 150, 20)
rnorm(30,mean=1,sd=1.5)
qnbinom(0.90, mu= 1500, size= 1.3 / (30 - 1)
Q
qnbinom(0.90, mu= 1500, size= 1.3) / (30 - 1)
qnbinom(0.90, mu= 1, size= 1.5) / (30 - 1)
0.71+0.52/2
(0.71+0.52)/2
load("/run/user/1000/gvfs/sftp:host=10.88.8.194/home/alzor001/modelresults/twoareas52weeks.RData")
dsvm_res <-  extract_dsvm_res (z, control, 1:5, 1:52)
extract_dsvm_res <- function(z, control, ages, season){
detach("package:FLCore", unload=TRUE)
simNumber <-control@simNumber
sp        <- c("sp1","sp2","sp3","sp4","sp5")
dsvm_res             <- as.data.frame(rbind(as.matrix(spp1Landings(sim(z))),
as.matrix(spp2Landings(sim(z))),
as.matrix(spp3Landings(sim(z))),
as.matrix(spp4Landings(sim(z))),
as.matrix(spp5Landings(sim(z)))))
names(dsvm_res)      <- "landings.wt"
dsvm_res$discards.wt <- c(rbind(as.matrix(spp1Discards(sim(z))),
as.matrix(spp2Discards(sim(z))),
as.matrix(spp3Discards(sim(z))),
as.matrix(spp4Discards(sim(z))),
as.matrix(spp5Discards(sim(z)))))
dsvm_res$catch.wt    <- dsvm_res$ landings + dsvm_res$discards
dsvm_res$effort      <- rep(rep(as.matrix(effort(sim(z))),each=length(ages)),length(sp))
dsvm_res$option      <- rep(rep(as.matrix(choice(sim(z))),each=length(ages)),length(sp))
dsvm_res$spp         <- as.factor(c(rep(sp, each=(simNumber*length(ages)*length(season)))))
dsvm_res$cat         <- ages
dsvm_res$season      <- c(rep(season, each=simNumber*length(ages)))
dsvm_res$vessel      <- rep(1:simNumber,each=length(ages))
dsvm_res$option[is.na(dsvm_res$option)] <- "Stay in port"
dsvm_res[c(1:4)]     <- lapply(dsvm_res[c(1:4)], function(x) as.numeric(as.character(x)))
dsvm_res[c(5:9)]     <- lapply(dsvm_res[c(5:9)], function(x) as.factor(x))
is.num               <- sapply(dsvm_res, is.numeric)
dsvm_res[is.num]     <- lapply(dsvm_res[is.num], round, 6)
# Just focus on sp1 and sp2
dsvm_res             <- subset(dsvm_res,(spp %in% c("sp1", "sp2")))
trip                 <- count(dsvm_res,c("spp","cat","season","option"))
names(trip)[5]       <- "trip"
dsvm_res             <- aggregate(cbind(landings.wt, discards.wt, catch.wt, effort)~ spp+cat+season+option, FUN=sum, data=dsvm_res)
dsvm_res             <- merge(dsvm_res, trip, by=c("spp","cat", "season","option"),all.x=TRUE)
return(dsvm_res)
}
dsvm_res <-  extract_dsvm_res (z, control, 1:5, 1:52)
extract_dsvm_res <- function(z, control, ages, season){
simNumber <-control@simNumber
sp        <- c("sp1","sp2","sp3","sp4","sp5")
dsvm_res             <- as.data.frame(rbind(as.matrix(spp1Landings(sim(z))),
as.matrix(spp2Landings(sim(z))),
as.matrix(spp3Landings(sim(z))),
as.matrix(spp4Landings(sim(z))),
as.matrix(spp5Landings(sim(z)))))
names(dsvm_res)      <- "landings.wt"
dsvm_res$discards.wt <- c(rbind(as.matrix(spp1Discards(sim(z))),
as.matrix(spp2Discards(sim(z))),
as.matrix(spp3Discards(sim(z))),
as.matrix(spp4Discards(sim(z))),
as.matrix(spp5Discards(sim(z)))))
dsvm_res$catch.wt    <- dsvm_res$ landings + dsvm_res$discards
dsvm_res$effort      <- rep(rep(as.matrix(effort(sim(z))),each=length(ages)),length(sp))
dsvm_res$option      <- rep(rep(as.matrix(choice(sim(z))),each=length(ages)),length(sp))
dsvm_res$spp         <- as.factor(c(rep(sp, each=(simNumber*length(ages)*length(season)))))
dsvm_res$cat         <- ages
dsvm_res$season      <- c(rep(season, each=simNumber*length(ages)))
dsvm_res$vessel      <- rep(1:simNumber,each=length(ages))
dsvm_res$option[is.na(dsvm_res$option)] <- "Stay in port"
dsvm_res[c(1:4)]     <- lapply(dsvm_res[c(1:4)], function(x) as.numeric(as.character(x)))
dsvm_res[c(5:9)]     <- lapply(dsvm_res[c(5:9)], function(x) as.factor(x))
is.num               <- sapply(dsvm_res, is.numeric)
dsvm_res[is.num]     <- lapply(dsvm_res[is.num], round, 6)
# Just focus on sp1 and sp2
dsvm_res             <- subset(dsvm_res,(spp %in% c("sp1", "sp2")))
trip                 <- count(dsvm_res,c("spp","cat","season","option"))
names(trip)[5]       <- "trip"
dsvm_res             <- aggregate(cbind(landings.wt, discards.wt, catch.wt, effort)~ spp+cat+season+option, FUN=sum, data=dsvm_res)
dsvm_res             <- merge(dsvm_res, trip, by=c("spp","cat", "season","option"),all.x=TRUE)
return(dsvm_res)
}
dsvm_res <-  extract_dsvm_res (z, control, 1:5, 1:52)
control     <- DynState.control(spp1LndQuota= 160000,  spp2LndQuota=1000000, spp1LndQuotaFine= 320, spp2LndQuotaFine= 3e6, fuelUse = 1, fuelPrice = 1600, landingCosts= 0.24,gearMaintenance= 87, addNoFishing= TRUE, increments= 20, spp1DiscardSteps= 0, spp2DiscardSteps= 0, sigma= 1, simNumber= 1000 , numThreads= 40, verbose=1)
dsvm_res <-  extract_dsvm_res (z, control, 1:5, 1:52)
dsvm_res <-  extract_dsvm_res (z, control, 1:5, 1:52)
library("plyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
dsvm_res <-  extract_dsvm_res (z, control, 1:5, 1:52)
modeffort<- subset(dsvm_res, spp %in% "sp1")
modeffort<- subset(dsvm_res, cat %in% "1")
View(modeffort)
modeffort<- with(modeffort,data.frame(spp, cat, season, option, effort, trip))
View(modeffort)
aggregate(cbind(effort,trip)~ spp+cat+option+season, FUN=sum, data=effort)
aggregate(cbind(effort,trip)~ spp+cat+option+season, FUN=sum, data=modeffort)
modeffort<- subset(dsvm_res, spp %in% "sp1")
modeffort<- subset(dsvm_res, cat %in% "1")
modeffort<- subset(dsvm_res, spp %in% "sp1")
modeffort<- subset(modeffort, cat %in% "1")
aggregate(cbind(effort,trip)~ spp+cat+option+season, FUN=sum, data=modeffort)
library(scales)
ggplot(all_effort, aes(x=as.factor(season), y=trip, fill=choice)) +
geom_bar(stat="identity", position = "fill", colour="black")+
scale_y_continuous( labels = percent)+
scale_fill_manual(values= c("gray100","gray60","gray20"))+
xlab("season") +
ylab("Fishing choice")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
ggplot(all_effort, aes(x=as.factor(season), y=trip, fill=choice)) +
geom_bar(stat="identity", position = "fill", colour="black")+
scale_y_continuous( labels = percent)+
scale_fill_manual(values= c("gray100","gray60","gray20"))+
xlab("season") +
ylab("Fishing choice")
ggplot(modeffort, aes(x=as.factor(season), y=trip, fill=choice)) +
geom_bar(stat="identity", position = "fill", colour="black")+
scale_y_continuous( labels = percent)+
scale_fill_manual(values= c("gray100","gray60","gray20"))+
xlab("season") +
ylab("Fishing choice")
View(modeffort)
ggplot(modeffort, aes(x=as.factor(season), y=trip, fill=options)) +
geom_bar(stat="identity", position = "fill", colour="black")+
scale_y_continuous( labels = percent)+
scale_fill_manual(values= c("gray100","gray60","gray20"))+
xlab("season") +
ylab("Fishing choice")
ggplot(modeffort, aes(x=as.factor(season), y=trip, fill=option)) +
geom_bar(stat="identity", position = "fill", colour="black")+
scale_y_continuous( labels = percent)+
scale_fill_manual(values= c("gray100","gray60","gray20"))+
xlab("season") +
ylab("Fishing choice")
50^9
10^10
20^10
8^10
10^9
1.0^9
1.5^9
10^9
8^9
10^129
10^9+1
10^9+100
10^9+100000
10^10+100000
15^10+100000
5^10+100000
10^9+100000
15^9+100000
1exp10
10exp10
10exp(10)
exp(10)
exp(15)
exp(150)
exp(75)
exp(20)
exp(21)
exp(19)
10^9+exp(19)
10^9+exp(20)
10^9+exp(25)
1e+09
1.5e+09
(1e+09)+100000
(1.5e+09)+100000
(5e+09)+100000
(1e+10)+100000
nbinom()
rnbinom()
rnbinom(n=100,size=1.9, mu=2)
hist(rnbinom(n=100,size=1.9, mu=2))
hist(rnbinom(n=100,size=1.9, mu=20))
hist(rnbinom(n=100,size=0.1, mu=20))
hist(rnbinom(n=100,size=0.1, mu=20), breaks=seq(0,200,1))
hist(rnbinom(n=100,size=0.1, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100,size=1, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=1000,size=1, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=10000,size=1, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=1, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=1, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=2, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=3, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=30, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=300, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=3000, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=30000000, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=1, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=0.5, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=0.9, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=0.8, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=0.7, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=0.6, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=0.7, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=30000000, mu=20), breaks=seq(0,300,1))
1e+09
10^9
hist(rnbinom(n=100000,size=300000000000, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=3e60, mu=20), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=1.8, mu=50), breaks=seq(0,300,1))
hist(rnbinom(n=100000,size=1.8, mu=50), breaks=seq(0,3000,1))
hist(rnbinom(n=100000,size=1.8, mu=50), breaks=seq(0,1000,1))
hist(rnbinom(n=100000,size=1.8, mu=50), breaks=seq(0,800,1))
hist(rnbinom(n=100000,size=1.8, mu=50), breaks=seq(0,600,1))
hist(rnbinom(n=100000,size=1.8, mu=50), breaks=seq(0,500,1))
hist(rnbinom(n=100000,size=1.8, mu=50), breaks=seq(0,400,1))
hist(rnbinom(n=100000,size=1.8, mu=50), breaks=seq(0,400,1))
hist(rnbinom(n=100000,size=2.8, mu=50), breaks=seq(0,400,1))
hist(rnbinom(n=100000,size=3.8, mu=50), breaks=seq(0,400,1))
hist(rnbinom(n=100000,size=4.8, mu=50), breaks=seq(0,400,1))
hist(rnbinom(n=100000,size=1.8, mu=50), breaks=seq(0,500,1))
hist(rnbinom(n=100000,size=4.8, mu=50), breaks=seq(0,400,1))
hist(rnbinom(n=100000,size=1.8, mu=50), breaks=seq(0,400,1))
hist(rnbinom(n=100000,size=4.8, mu=50), breaks=seq(0,400,1))
hist(rnbinom(n=100000,size=1.8, mu=750), breaks=seq(0,4000,1))
hist(rnbinom(n=100000,size=1.8, mu=750), breaks=seq(0,8000,10))
hist(rnbinom(n=100000,size=1.8, mu=750), breaks=seq(0,6000,10))
hist(rnbinom(n=100000,size=5.8, mu=750), breaks=seq(0,6000,10))
160/7
160e3
extract_dsvm_res <- function(z, control, ages, season){
#detach("package:FLCore", unload=TRUE)
simNumber <-control@simNumber
sp        <- c("sp1","sp2","sp3","sp4","sp5")
dsvm_res             <- as.data.frame(rbind(as.matrix(spp1Landings(sim(z))),
as.matrix(spp2Landings(sim(z))),
as.matrix(spp3Landings(sim(z))),
as.matrix(spp4Landings(sim(z))),
as.matrix(spp5Landings(sim(z)))))
names(dsvm_res)      <- "landings.wt"
dsvm_res$discards.wt <- c(rbind(as.matrix(spp1Discards(sim(z))),
as.matrix(spp2Discards(sim(z))),
as.matrix(spp3Discards(sim(z))),
as.matrix(spp4Discards(sim(z))),
as.matrix(spp5Discards(sim(z)))))
dsvm_res$catch.wt    <- dsvm_res$ landings + dsvm_res$discards
dsvm_res$effort      <- rep(rep(as.matrix(effort(sim(z))),each=length(ages)),length(sp))
dsvm_res$option      <- rep(rep(as.matrix(choice(sim(z))),each=length(ages)),length(sp))
dsvm_res$spp         <- as.factor(c(rep(sp, each=(simNumber*length(ages)*length(season)))))
dsvm_res$cat         <- ages
dsvm_res$season      <- c(rep(season, each=simNumber*length(ages)))
dsvm_res$vessel      <- rep(1:simNumber,each=length(ages))
dsvm_res$option[is.na(dsvm_res$option)] <- "Stay in port"
dsvm_res[c(1:4)]     <- lapply(dsvm_res[c(1:4)], function(x) as.numeric(as.character(x)))
dsvm_res[c(5:9)]     <- lapply(dsvm_res[c(5:9)], function(x) as.factor(x))
is.num               <- sapply(dsvm_res, is.numeric)
dsvm_res[is.num]     <- lapply(dsvm_res[is.num], round, 6)
# Just focus on sp1 and sp2
dsvm_res             <- subset(dsvm_res,(spp %in% c("sp1", "sp2")))
trip                 <- count(dsvm_res,c("spp","cat","season","option"))
names(trip)[5]       <- "trip"
dsvm_res             <- aggregate(cbind(landings.wt, discards.wt, catch.wt, effort)~ spp+cat+season+option, FUN=sum, data=dsvm_res)
dsvm_res             <- merge(dsvm_res, trip, by=c("spp","cat", "season","option"),all.x=TRUE)
return(dsvm_res)
}
load("/run/user/1000/gvfs/sftp:host=10.88.8.194/home/alzor001/modelresults/Beam_large_B160_south_sigma_1_5e4.RData")
dsvm_res <-  extract_dsvm_res (BS160, control, 1:5, 1:52)
library(plyr)
dsvm_res <-  extract_dsvm_res (BS160, control, 1:5, 1:52)
modeffort<- subset(dsvm_res, spp %in% "sp1")
modeffort<- subset(modeffort, cat %in% "1")
modeffort$option<- factor(modeffort$option, levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","16", "Stay in port"),labels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","16", "Stay in port"))
library(scales)
library(ggplot2)
ggplot(modeffort, aes(x=factor(season), y=trip, fill=option, order= option)) +
geom_bar(stat="identity", position = "fill", colour="black")+
scale_y_continuous( labels = percent)+
scale_fill_grey(start = 1, end = 0)+
theme_bw()+
xlab("season") +
ylab("Fishing choice")
load("/run/user/1000/gvfs/sftp:host=10.88.8.194/home/alzor001/modelresults/Beam_large_B120_south_sigma_1_5e4.RData")
dsvm_res <-  extract_dsvm_res (BS120, control, 1:5, 1:52)
modeffort<- subset(dsvm_res, spp %in% "sp1")
modeffort<- subset(modeffort, cat %in% "1")
modeffort$option<- factor(modeffort$option, levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","16", "Stay in port"),labels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","16", "Stay in port"))
png(filename="~/Dropbox/PULSE/report/figures/Beam_large_B120_south_sigma_1_5e4.png", width=26, height=10, units="cm", res=500, pointsize=8)
ggplot(modeffort, aes(x=factor(season), y=trip, fill=option, order= option)) +
geom_bar(stat="identity", position = "fill", colour="black")+
scale_y_continuous( labels = percent)+
scale_fill_grey(start = 1, end = 0)+
theme_bw()+
xlab("season") +
ylab("Fishing choice")
dev.off()
setwd("~/Dropbox/PULSE/Pulse")
options(width=240)
library(RDynState5NAsigmaseason52Age5)
library(ggplot2)
library(reshape2)
library(FLCore)
library(plyr)
library(scales)
source("~/code/functions.R")
source("code/functions.R")
setwd("~/data/results")
temp <- list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
sp1<- sp2 <- sp3 <- sp4 <- sp5 <-    new("DynStateInput")
sp1 <- cpue_dsvm_sp(sol_beam_large.csv, sp1, 1.637352)  #SOLE   # gamsol$family$getTheta() for Sole in Jurgens GAMs is 1.637352
sp2 <- cpue_dsvm_sp(ple_beam_large.csv, sp2, 1.195788)  #PLAICE # gample$family$getTheta() for Plaice in Jurgens GAMs is 1.195788
sp3 <- cpue_dsvm_sp(cod_beam_large.csv, sp3, 0.8979249) #COD    # gamcod$family$getTheta() for Cod in Jurgens GAMs is 0.8979249
catchMean(sp4) <- catchMean(sp5) <- array(0.01,dim=dim(catchMean(sp2)),dimnames=dimnames(catchMean(sp2)))
catchSigma(sp4)<- catchSigma(sp5)<- array(0.0000001,dim=dim(catchMean(sp2)),dimnames=dimnames(catchMean(sp2)))
setwd("data/results")
temp <- list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
sp1<- sp2 <- sp3 <- sp4 <- sp5 <-    new("DynStateInput")
# ---------------------
# ---------------------------------------------
# BEAM TRAWLS: LONG DISTANCE fleet
# --------------------------------------------
# ---------------------
#
sp1 <- cpue_dsvm_sp(sol_beam_large.csv, sp1, 1.637352)  #SOLE   # gamsol$family$getTheta() for Sole in Jurgens GAMs is 1.637352
sp2 <- cpue_dsvm_sp(ple_beam_large.csv, sp2, 1.195788)  #PLAICE # gample$family$getTheta() for Plaice in Jurgens GAMs is 1.195788
sp3 <- cpue_dsvm_sp(cod_beam_large.csv, sp3, 0.8979249) #COD    # gamcod$family$getTheta() for Cod in Jurgens GAMs is 0.8979249
catchMean(sp4) <- catchMean(sp5) <- array(0.01,dim=dim(catchMean(sp2)),dimnames=dimnames(catchMean(sp2)))
catchSigma(sp4)<- catchSigma(sp5)<- array(0.0000001,dim=dim(catchMean(sp2)),dimnames=dimnames(catchMean(sp2)))
array(c(effort_dsvm_input(4.2,52,11,89.5,"south")[c(1:14,16),8]), dim=c(15,52), dimnames=list(option=dimnames(catchMean(sp1))[[3]],season=as.character(dimnames(catchMean(sp1))[[2]])))
View(effort_dsvm_input)
effort_dsvm_input <- function(lon, lat, steamspeed, fishingtime, port){
#---------------------------------------------------------------------------------------------------------
# determine mean fishing-effort large beam trawlers or euro-cutters
#---------------------------------------------------------------------------------------------------------
# need the lon and lat from the home port to estimate the distance
# need the mean steam speed and fishing time of the studied fleet
# from home port
dist        <- read.csv("~/Dropbox/PULSE/Pulseproject/data/input/coord_distance.csv")
dist        <- dist[dist$port==as.character(port),]
dist        <- dist[,c(3,2)]
area        <- dist[1:16,]
homeport    <- dist[16,]
homeport[]  <- c(lon, lat)
dist_to_port <- rdist.earth(area, homeport, miles = F, R = NULL)*2                    # times 2 for return travel!
colnames(dist_to_port)[1] <- "km_dist"
# conversions-factor 1Nm = 1.825km
Nm           <- rep(1.852,16)
dist_to_port <- cbind(dist_to_port,Nm)
Nm_dist      <- dist_to_port[,1]/dist_to_port[,2]
newdat       <- cbind(dist_to_port,Nm_dist)
# vessels have steamingspeed of 12Nm h-1 (nav stuk mike en Jan Jaap)
speed  <- rep(steamspeed,16)
newdat <- cbind(newdat,speed)
# Calculate steam-time to area
steamT              <- newdat[,3]/speed
newdat              <- cbind(newdat,steamT)
colnames(newdat)[5] <- "steam_time"
# Calculate tot time per trip = steam + fishing time (hours)
fishing  <- rep(fishingtime,16)
tot_time <- fishing + newdat[,5]
newdat   <- cbind(newdat,fishing,tot_time)
# calculate Days-at-Sea
#DAS1<- newdat[,7]/24
#DAS <- round(newdat[,7]/12)
#newdat <- cbind(newdat,DAS)
# 3 2 3 3 2 2 3 3 3 2 3 3 3 3 4 3 Low variation among areas!!!
# to get more differentiation between the areas
# devided tot.time by 6 (quarter of a day)
DAS_UK <- ceiling(newdat[,7]/6)
newdat <- cbind(newdat,DAS_UK)
return(newdat)
}
array(c(effort_dsvm_input(4.2,52,11,89.5,"south")[c(1:14,16),8]), dim=c(15,52), dimnames=list(option=dimnames(catchMean(sp1))[[3]],season=as.character(dimnames(catchMean(sp1))[[2]])))
View(effort_dsvm_input)
dist        <- read.csv("~/Dropbox/PULSE/Pulseproject/data/input/coord_distance.csv")
dist        <- dist[dist$port==as.character(port),]
dist        <- dist[,c(3,2)]
area        <- dist[1:16,]
homeport    <- dist[16,]
dist        <- read.csv("~/Dropbox/PULSE/Pulseproject/data/input/coord_distance.csv")
dist        <- dist[dist$port==as.character("south"),]
dist        <- dist[,c(3,2)]
area        <- dist[1:16,]
homeport    <- dist[16,]
homeport[]  <- c(4.2, 52)
dist_to_port <- rdist.earth(area, homeport, miles = F, R = NULL)*2                    # times 2 for return travel!
colnames(dist_to_port)[1] <- "km_dist"
Nm           <- rep(1.852,16)
dist_to_port <- cbind(dist_to_port,Nm)
Nm_dist      <- dist_to_port[,1]/dist_to_port[,2]
newdat       <- cbind(dist_to_port,Nm_dist)
speed  <- rep(11,16)
newdat <- cbind(newdat,speed)
# Calculate steam-time to area
steamT              <- newdat[,3]/speed
newdat              <- cbind(newdat,steamT)
colnames(newdat)[5] <- "steam_time"
fishing  <- rep(88,16)
tot_time <- fishing + newdat[,5]
newdat   <- cbind(newdat,fishing,tot_time)
View(newdat)
dist_to_port
View(dist)
newdat$Nm_dist/2
newdat$Nm_dist
newdat[3]
newdat[,3]
newdat[,3]/2
View(newdat)
View(newdat)
View(newdat)
347/4
